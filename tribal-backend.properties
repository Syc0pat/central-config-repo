server.port = 8442

server.shutdown=graceful
management.endpoints.web.exposure.include=*



#### -- development --

##custom.database-server.host = 192.168.0.102
##custom.messaging-server.host = 192.168.0.102

#### -- production --

##custom.database-server.host = mongo-svc
##custom.messaging-server.host = rabbitmq-svc






#debug=true

#spring.data.rest.base-path=/api
server.servlet.context-path = /api
spring.data.rest.defaultPageSize = 10





# =================================== DATABASE SERVER ============================================



# -------------------------------- SQL -----------------------------------


#### ------- MYSQL -----------

#spring.datasource.url = jdbc:mysql://localhost:3306/dockerize_java_web
#spring.datasource.username = root
#spring.datasource.password = root

#### ------- POSTGRESQL -----------

#spring.datasource.url = jdbc:postgresql://localhost:5432/dockerize_java_web
#spring.datasource.username = postgres
#spring.datasource.password = postgres

#### ------- ORACLE -----------

#spring.datasource.url = jdbc:oracle:thin:@//localhost:1521/PDB_DOCKERIZE_JAVA_WEB
#spring.datasource.username = oradb_pdb
#spring.datasource.password = oradb_pdb


#::: NOTE :::  Oracle & MS SQL Server both DO NOT support IF NOT EXISTS command in CREATE TABLE statement (Require workaround via custom PLSQL blocks) SO ensure commenting-out of schema.sql file from /resources & manual creation of users table in this case




# -------------------------------- NoSQL ----------------------------------



#### -------------  MONGO-DB -------------------


## ---localhost-development---

spring.data.mongodb.uri = mongodb://192.168.0.102:27017/dockerize_java_web
    ## OR ##
#spring.data.mongodb.host = localhost
#spring.data.mongodb.port = 27017
#spring.data.mongodb.database = dockerize_java_web


## ---kubernetes-production---

#spring.data.mongodb.uri = mongodb://mongo-svc:27017/dockerize_java_web



#### ----- MONGO-ATLAS (REMOTE CLUSTER) -------

#spring.data.mongodb.uri = mongodb+srv://mongodbuser:mongo98765@cluster0.chpry.mongodb.net/dockerize_java_web?retryWrites=true&w=majority



#### ------------  NEO4J --------------

#spring.neo4j.uri= bolt://localhost:7687
#spring.data.neo4j.database = neo4j
#spring.neo4j.authentication.username= neo4j
#spring.neo4j.authentication.password= neo


#logging.level.org.springframework.data.neo4j=DEBUG



#### --------  CASSANDRA -------------

#spring.data.cassandra.local-datacenter = datacenter1
#spring.data.cassandra.contact-points = localhost
#spring.data.cassandra.port = 9042
#spring.data.cassandra.keyspace-name = dockerize_java_web



#### ---------  ELASTICSEARCH ------------

#spring.data.elasticsearch.cluster-nodes = localhost:9200
#spring.data.elasticsearch.cluster-name = elasticsearch



#### -----------  REDIS ------------

#spring.redis.host = localhost
                    #172.24.84.22
#spring.redis.port = 6379


# can add more NoSQL dependencies, repos & configurations like CouchBase / GemFire etc.. similarly









# =================================== MESSAGING-SERVER =========================================



#### -------- ACTIVE MQ (EMBEDDED) -----------

#spring.activemq.broker-url=vm://localhost
#spring.activemq.broker-url=tcp://localhost:61616


# Artemis
# Redis-Messaging
# Kafka
# Confluent



#### --------- RABBIT-MQ -------------


##  --localhost-development--

spring.rabbitmq.host= 192.168.0.102
spring.rabbitmq.port= 5672
spring.rabbitmq.username= rabbit_user
spring.rabbitmq.password= rabbit_pass

##  --kubernetes-production--

#spring.rabbitmq.host= rabbitmq-svc
#spring.rabbitmq.port= 5672
#spring.rabbitmq.username= guest
#spring.rabbitmq.password= guest


custom.rabbitmq.sender.exchangeName = rabbit-user-topic_exchange
custom.rabbitmq.sender.queueExchangeRoutingKey.1 = tribal.rabbitmq.userMessage.testRoute
custom.rabbitmq.sender.queueExchangeRoutingKey.2 = tribal.rabbitmq.userMessage.anotherRoute

custom.rabbitmq.listener.exchangeName = rabbit-string-topic_exchange
custom.rabbitmq.listener.queueName = rabbit-string-queue
custom.rabbitmq.listener.queueExchangeBindRoutingKey = tribal.rabbitmq.stringMessage.#




#### ------------ KAFKA -------------



#### ---------- CONFLUENT -------------






#### ========================= E-MAIL ===========================


## --- mail-server & sender-account-auth ---

spring.mail.host = smtp.gmail.com
spring.mail.port = 587
spring.mail.username = testcoder321@gmail.com
spring.mail.password = idizokhpkcvouxnu
spring.mail.properties.mail.smtp.auth = true
spring.mail.properties.mail.smtp.starttls.enable = true

## --- sender & recipient emails ---

custom.javaMailSender.from = testcoder321@gmail.com
custom.javaMailSender.to = testcoder54321@gmail.com
















###### NOTE :: index-name & other configs can be modified via ---> "C:\elasticsearch-7.12.0\config\elasticsearch.yml" ######
#           :: host.binding (0.0.0.0), protected mode (no) & other configs can be modified via ----> "/etc/redis/redis.conf"


#spring.data.rest.base-path=/api   (usage not recommended since it does not add the base path during link generation)



#Usage not recommended -> To be used when GeneratedValue Strategy = GenerationType.AUTO  (only with MySQL / Postgres)
#spring.jpa.hibernate.use-new-id-generator-mappings = false





#Spring Data REST officially supports:
#
#        Spring Data JPA        (Oracle, MySQL, Postgres, H2, HSQL...)
#
#        Spring Data MongoDB
#
#        Spring Data Neo4j
#
#        Spring Data GemFire
#
#        Spring Data Cassandra
#




























#---------DOCKER MONGO-------------

#spring.data.mongodb.host=127.0.0.1
#spring.data.mongodb.port=27017
#spring.data.mongodb.authentication-database=admin
#spring.data.mongodb.username=<username specified on MONGO_INITDB_ROOT_USERNAME>
#spring.data.mongodb.password=<password specified on MONGO_INITDB_ROOT_PASSWORD>
#spring.data.mongodb.database=<the db you want to use>



#It's also important to note that MongoDB has the concept of "authentication database", which can be different than the database you are connecting to. \

#  For example, if you use the official Docker image for Mongo and specify the environment variables MONGO_INITDB_ROOT_USERNAME and MONGO_INITDB_ROOT_PASSWORD,
#  a user will be created on 'admin' database, which is probably not the database you want to use. \
#  In this case, you should specify parameters accordingly on your application.properties file using:


